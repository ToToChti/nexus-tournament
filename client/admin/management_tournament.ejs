<!DOCTYPE html>
<html lang="fr">

<head>
    <%- include('../includes/metadata.ejs', {user}) %>

    <title>Détails du Tournoi</title>
    <link rel="stylesheet" href="../admin/admin_management_tournament.css">
</head>

<body>
    <%- include('../includes/header.ejs', {user}) %>
    <div class="container mt-5">
        <!-- Titre principal -->
        <div class="d-flex justify-content-center align-items-center header-container">
            <h1 class="header-title">Modifier un tournoi</h1>
        </div>

        <!-- Contenu principal -->
        <div class="main-content d-flex">
            <!-- Formulaire à gauche -->
            <form method='post' class="form-box" action="../updateTournament" id="update_tournament_form" novalidate>
                <input type="hidden" id="tournament_id" name="tournament_id" value=''>

                <p><strong>Nom du tournoi :</strong></p>
                <input type="text" id="name" name="name" placeholder="Nom du tournoi" value="">

                <p><strong>Jeu :</strong></p>
                <input type="text" id="game" name="game" placeholder="Jeu" value="">

                <p><strong>Nombre de Participants : </strong></p>
                <input type="number" id="number_player" disabled>

                <p><strong>Nombre de Spectateurs : </strong></p>
                <input type="number" id="number_viewer" disabled>

                <p><strong>Lieu :</strong></p>
                <input type="text" id="place" name="place" placeholder="Lieu" value="">

                <p><strong>Date :</strong></p>
                <input type="date" id="date" name="date" value="">

                <p><strong>Prix à l'inscription :</strong></p>
                <input type="number" min="0" id="price" name="price" value="">

                <p><strong>Arbitres :</strong></p>
                <input type="text" placeholder="Arbitres" id="referee" name="referee" value="">


                <p><strong>Sponsors :</strong></p>
                <input type="text" class="sponsors form-control" style="width: 20em;" placeholder="Sponsor"
                    id="sponsor" name="sponsor" value="">

                <span>à hauteur de :</span>
                <input type="number" min="0" step="0.01" class="hauteur_de form-control" style="width: 10em;"
                    placeholder="€" id="sponsorPrice" name="sponsorPrice" value="">

                <p><strong>Commentateurs :</strong></p>
                <input type="text" placeholder="Commentateurs" id="commentator" name="commentator" value="">
            </form>

            <!-- Image et boutons à droite -->
            <div class="right-section">
                <div class="tournament-image-box">
                    <label for="image-upload">Image du tournoi</label>
                    <img id="image-preview" src="#" alt="Aperçu de l'image"
                        style="display: none; margin-top: 10px; max-width: 100%; border-radius: 5px;">

                    <input type="file" id="image-upload" accept="image/*" onchange="previewImage(event)"
                        style="display: none;">
                </div>
                <a href="/admin">
                    <button type="submit" form="update_tournament_form" class="enregister">Enregistrer les modifications</button>
                </a>
                <a href="/admin">
                    <button class="supp">Supprimer le tournoi</button>
                </a>

                <div class="cash-prize-box">
                    <p><strong>Montant total du prize pool:</strong></p>
                </div>

                <div>
                    <button class="start_match_macking" id="start_match_making" onclick="startMatchmaking()">Lancer le matchmaking</button>
                </div>
                
                <div class="joueurs-inscrits">
                    <p><strong>Joueurs inscrits :</strong></p>
                    <ul class="list-joueurs-inscrits"></ul>
                </div>

            </div>
            <div class="tournament-display" id="tournament-display"></div>
        </div>

        <div>
            <button class="qr_code" onclick=QrCodeStart()>Scanner le QR code des joueurs </button>
        </div>
    </div>

    <script>
        


        

        let winners = [];
        let currentRound = [];

        // Fonction pour créer une nouvelle manche
        function createRound(players, numberRound, previousWinners = {}) {
            const round = document.createElement('div');
            round.className = 'round';

            const roundTitle = document.createElement('div');
            roundTitle.className = 'round-title';
            roundTitle.textContent = `Round ${numberRound}`;
            round.appendChild(roundTitle);

            for (let i = 0; i < players.length; i += 2) {
                const match = document.createElement('div');
                match.className = 'match';

                const player1 = players[i];
                const player2 = players[i + 1];

                const player1Element = document.createElement('span');
                player1Element.textContent = player1;

                const player2Element = document.createElement('span');
                player2Element.textContent = player2;

                const button1 = document.createElement('button');
                button1.textContent = 'Gagnant';
                button1.onclick = () => {
                    selectWinner(player1, match, numberRound);
                };

                const vsElement = document.createElement('span');
                vsElement.textContent = ' VS ';
                vsElement.style.fontWeight = 'bold';
                vsElement.style.color = '#fff';

                const button2 = document.createElement('button');
                button2.textContent = 'Gagnant';
                button2.onclick = () => {
                    selectWinner(player2, match, numberRound);
                };

                match.appendChild(player1Element);
                match.appendChild(button1);
                match.appendChild(vsElement);
                match.appendChild(button2);
                match.appendChild(player2Element);
                round.appendChild(match);

                // Si le match a déjà été joué, sélectionner automatiquement le gagnant
                if (previousWinners[numberRound] ) {
                    selectWinner(previousWinners[numberRound][i/2], match, numberRound);
                }
            }

            return round;
        }

        // Fonction pour sélectionner un gagnant
        function selectWinner(winner, match, numberRound) {
            match.innerHTML = `<span class="winner">${winner}</span>`;
            winners.push(winner);

            if (winners.length === currentRound.length / 2) {
                setTimeout(() => nextRound(winners, numberRound), 500);
            }
        }

        // Fonction pour générer le prochain tour
        function nextRound(winnersList, numberRound) {
            winners = [];
            SaveNextRound(winnersList);
            if (winnersList.length === 1) {
                alert(`Le gagnant du tournoi est : ${winnersList[0]}!`);
                UpdateLeaderBoardAndScore();
                return;
            }

            const tournamentDisplay = document.getElementById('tournament-display');
            const nextRoundElement = createRound(winnersList, ++numberRound);
            tournamentDisplay.appendChild(nextRoundElement);
            currentRound = winnersList;
        }

        // Fonction pour démarrer le matchmaking
        async function startMatchmaking() {
            try {
                    // Récupérer l'ID du tournoi depuis l'URL
                const url = new URLSearchParams(window.location.search);
                const id = url.get('id');

                if (!id) {
                    alert("Aucun ID de tournoi trouvé dans l'URL !");
                    return;
                }

                // Envoyer la requête POST à /matchMaking
                const responsematchMaking = await fetch('/matchMaking', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ id }),
                });

                // Gérer la réponse de la requête
                const resultmatchMaking = await responsematchMaking.json();

                if (responsematchMaking.ok) {
                    
                    console.log(resultmatchMaking.playerArray); // Affiche le matchmaking dans la console
                } else {
                    alert(`Erreur : ${resultmatchMaking.message}`);
                }

                if (!id) {
                    alert("Aucun ID de tournoi trouvé !");
                    return;
                }

                // Récupérer ListeMatchMaking depuis le backend
                const response = await fetch('/getListeMatchMaking', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ id }),
                });

                if (!response.ok) {
                    throw new Error(`Erreur lors de la récupération de la liste : ${response.statusText}`);
                }

                const result = await response.json();
                const listeMatchMaking = result.listeMatchMaking;

                if (!listeMatchMaking || !Array.isArray(listeMatchMaking) || listeMatchMaking.length === 0) {
                    
                    return;
                }

                // Assigner la liste récupérée à players
                players = listeMatchMaking;

                // Réinitialiser et afficher le premier round
                const tournamentDisplay = document.getElementById('tournament-display');
                tournamentDisplay.innerHTML = ''; // Réinitialise l'affichage

                currentRound = players;
                const firstRound = createRound(players, 1);
                tournamentDisplay.appendChild(firstRound);

               
            } catch (error) {
                console.error("Erreur lors du démarrage du matchmaking :", error);
                alert("Une erreur est survenue lors du démarrage du matchmaking.");
            }
        }

        //Updating the Match Making Tab in the BDD
        async function SaveNextRound(newRound) {
            try {
                // Récupération de l'ID depuis l'URL
                const url = new URLSearchParams(window.location.search);
                const id = url.get('id');
                console.log("ID:", id, "Nouvelle ronde:", newRound);

                // Envoi de la requête POST avec les en-têtes appropriés
                const response = await fetch('/UpdateTabMatchMaking', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json' // Déclare que le corps est du JSON
                    },
                    body: JSON.stringify({
                        id,        // L'ID récupéré de l'URL
                        newRound   // La nouvelle ronde à sauvegarder
                    })
                });

                // Vérification de la réponse
                if (response.ok) {
                    const result = await response.json(); // Analyse la réponse JSON (si le serveur en renvoie une)
                    console.log("Mise à jour réussie :", result);
                } else {
                    console.error("Erreur lors de la mise à jour :", response.status, response.statusText);
                }
            } catch (e) {
                console.error('Erreur réseau ou autre lors de la mise à jour de TabMatchMaking:', e);
            }
        }


        // Filling tournaments datas in the form
        async function fillTournamentDatas() {
            try {

                const url = new URLSearchParams(window.location.search) 
                const id = url.get('id');

                const response = await fetch('/getTournamentInfo', {
                    method: 'POST',
                    body: JSON.stringify({
                        id
                    }),
                    headers: {
                        "Content-type": "application/json; charset=UTF-8"
                    }
                });
                const result = await response.json();

                //console.log(result);

                document.querySelector('input#tournament_id').value = id ;
                document.querySelector('input#commentator').value = result.tournament.Commentateur ;
                document.querySelector('input#sponsor').value = result.tournament.Sponsor[0].sponsor ;
                document.querySelector('input#sponsorPrice').value = result.tournament.Sponsor[0].montant ;
                document.querySelector('input#name').value = result.tournament.Nom ;
                document.querySelector('input#game').value = result.tournament.Jeu ;
                document.querySelector('input#number_player').value = result.tournament.NbMaxJoueur ;
                document.querySelector('input#number_viewer').value = result.tournament.NbMaxSpectateur ;
                document.querySelector('input#place').value = result.tournament.Lieu ;
                document.querySelector('input#date').value = result.tournament.Date ;
                document.querySelector('input#price').value = result.tournament.Prix ;
                document.querySelector('input#referee').value = result.tournament.Arbitre;
                
                
                const cashPrize = document.querySelector('.cash-prize-box');
                var valueCashPrize = result.tournament.ListeParticipant.length * parseInt(result.tournament.Prix) + (parseInt(result.tournament.Sponsor[0].montant)||0);
                displayValueCashPrize = document.createElement("p")
                displayValueCashPrize.innerHTML = `<strong> ${valueCashPrize}€</strong>`
                cashPrize.appendChild(displayValueCashPrize);
                
                const listJoueursInscrits = document.querySelector('.list-joueurs-inscrits');
                
                result.tournament.ListeParticipant.forEach(element => {
                    if(element[1] == "Joueur"){
                        const li = document.createElement('li');
                        li.textContent = element[3];
                        listJoueursInscrits.appendChild(li);
                    }
                });

            }
            catch (e) {
                console.error('Error in the request...')
            }
        }

        fillTournamentDatas();



        function QrCodeStart() {
            const url = new URLSearchParams(window.location.search) 
            const id = url.get('id');

            window.location.href = `/qr_code?id=${id}`;
        }

       

        async function UpdateLeaderBoardAndScore(){
            try{
                const url = new URLSearchParams(window.location.search) 
                const id = url.get('id');

                const response = await fetch('/UpdateLeaderBoardAndScore', {
                    method: 'POST',
                    body: JSON.stringify({
                        id
                    }),
                    headers: {
                        "Content-type": "application/json; charset=UTF-8"
                    }
                });
                const result = await response.json();

            }catch (e) {
                console.error('Error in the request...')
            }
        }

        async function checkMatchMakingStatus() {
            try {
                // Récupérer l'ID du tournoi depuis l'URL
                const url = new URLSearchParams(window.location.search);
                const id = url.get('id');

                if (!id) {
                    console.error("Aucun ID de tournoi trouvé dans l'URL !");
                    return;
                }

                // Récupérer TableauMatchMaking depuis le backend
                const response = await fetch('/getTableauMatchMaking', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ id }),
                });

                if (!response.ok) {
                    console.error("Erreur lors de la récupération du tableau de matchmaking.");
                    return;
                }

                const result = await response.json();
                const tableauMatchMaking = result.tableauMatchMaking; // Un tableau de tableaux (chaque round)
                const tournamentDisplay = document.getElementById('tournament-display');
                const startMatchMakingButton = document.getElementById('start_match_making');

                if (tableauMatchMaking && Array.isArray(tableauMatchMaking) && tableauMatchMaking.length > 0) {
                    // Remplacer le bouton par un bouton désactivé
                    if (startMatchMakingButton) {
                        const disabledButton = document.createElement('button');
                        disabledButton.textContent = "Matchmaking déjà fait";
                        disabledButton.className = "start_match_making disabled";
                        disabledButton.disabled = true;

                        startMatchMakingButton.replaceWith(disabledButton);
                    }
                    
                    // Afficher les rounds existants
                    tournamentDisplay.innerHTML = ''; // Réinitialiser l'affichage
                    tableauMatchMaking.forEach((round, index) => {
                    if(round.length!=1){
                        const roundElement = createRound(round, index + 1,tableauMatchMaking);
                        tournamentDisplay.appendChild(roundElement);
                        currentRound=round;
                        winners=[];
                    }
                    });
                    
                    console.log("Arbre de matchmaking chargé avec succès !");
                } else {
                    console.log("Aucune liste de matchmaking trouvée. Le bouton est visible.");
                }
            } catch (error) {
                console.error("Erreur lors de la vérification du matchmaking :", error);
            }
        }


        // Appeler la fonction au chargement de la page
        checkMatchMakingStatus();

    </script>
</body>

</html>